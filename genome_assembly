# 1) Long read quality control

./fastqc *fastq.gz fastqc_output/

# 2) Run Supernova

supernova run \--id=SFS_longreadassembly \--fastqs=/home/jesse/vol1/NQA6UAY/WIL14931.20201014/201007_E00389_0476_AHF2MTCCX2/working/supernova-2.1.1/SFS_fastq \--maxreads='all'

# 3) Make fasta (style raw) from supernova run

nohup supernova mkoutput \
        --style=raw \
        --asmdir=SFS_longreadassembly/outs/assembly \
        --outprefix=SFS_longreadassembly/fasta_pseudohap & 
        [ --minsize=N ] \
        [ --headers=short|full ]

# 4) Short read quality control

./fastqc *fastq.gz fastqc_output/

# 5) Concatenate short reads across lanes and re run fastqc

nohup cat SFS_CC1_S14_L*_R1_001.fastq.gz > SFS_CC1_R1.fastq.gz & 
nohup cat SFS_CC1_S14_L*_R2_001.fastq.gz > SFS_CC1_R2.fastq.gz &

# 6) Trim using trimmomatic
nohup java -jar /home/jesse/vol1/NQA6UAY/WIL14931.20201014/201007_E00389_0476_AHF2MTCCX2/working/Trimmomatic-0.39/trimmomatic-0.39.jar PE SFS_CC1_R1.fastq.gz SFS_CC1_R2.fastq.gz SFS_CC1_R1_Trimmed.fastq.gz SFS_CC1_R1_Unpaired.fastq.gz SFS_CC1_R2_Trimmed.fastq.gz SFS_CC1_R2_Unpaired.fastq.gz ILLUMINACLIP:/home/jesse/vol1/NQA6UAY/WIL14931.20201014/201007_E00389_0476_AHF2MTCCX2/working/Trimmomatic-0.39/adapters/TruSeq3-PE-2.fa:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36 &

# 7) Contamination classification with kraken2 - run for each short-read pair separately and make sure to generate reports -> generate custom bacteria only db ***output is fastq NOT fastq.gz

#Kraken db build
kraken2-build --download-taxonomy --db bacteriaDB
kraken2-build --download-library bacteria --db bacteriaDB
nohup kraken2-build --build --db bacteriaDB &

# kraken classification
nohup /home/ubuntu/volume_genome/NLDN8JR/WIL14931/200929_E00389_0474_AHCF7VCCX2/working/kraken2-2.1.1/kraken2_dir/kraken2 --gzip-compressed --db /home/ubuntu/volume_genome/NLDN8JR/WIL14931/200929_E00389_0474_AHCF7VCCX2/working/kraken2-2.1.1/kraken2_dir/bacteriaDB --paired --unclassified-out NFS_50254_unclass#.fastq.gz SFS_CC1_R1_Trimmed.fastq.gz SFS_CC1_R2_Trimmed.fastq.gz --report SFS_CC1Report --use-names &

# Count number of reads after trimming and contamination screening
cat file.fastq | paste - - - - | cut -f2 | wc -c > file_* (* = 1 or 2 depending on forward/reverse)


#10) BUSCO on long read asssembly
nohup scripts/run_BUSCO.py -i ./fasta_pseudohap.fasta -o fasta_pseudohap_BUSCO -l mammalia_odb9 -m geno -f -sp human -c 2 &

#11) Repeat Masker
nohup ./RepeatMasker -e ncbi -pa 32 /home/ubuntu/vol1/fasta_files/fasta_pseudohap.fasta -species glaucomys > fasta_pseudohap.fasta.masked &

#12a) Annotation with AUGUSTUS without RNA-seq
nohup scripts/bin/augustus --species=human --gff3=on ./fasta_pseudohap.fasta.masked > human_annotation.gff &

#12b) Annotation with AUGUSTUS with RNA-seq
# Use blat to align transcriptome and masked genome
nohup ./blat -noHead -stepSize=5 -minIdentity=93 /home/ubuntu/vol1/fasta_files/fasta_pseudohap.fasta.masked /home/ubuntu/vol1/transcriptome/Glaucomys_Trinity.fasta ali.psl &

#Then filter alignments for alignment quality, uniqueness and pairedness, if applicable.
cat ali.psl | scripts/filterPSL.pl --uniq > ali.f.psl &

#Sort alignments by target sequence and within target sequence by position for further processing (fs = filtered and sorted)
cat ali.f.psl | sort -n -k 16,16 | sort -s -k 14,14 > ali.fs.psl

#We currently generate two types of hints from the RNA-Seq alignments, exonpart and intron hints. Intron hints are more important but can currently not be generated by all NGS mapping programs: Most of them perform no spliced alignment.
#Intron hints
nohup scripts/blat2hints.pl --intronsonly --in=ali.fs.psl --out=hints.introns.gff &

#Each exonpart hint specifies an interval that is likely to be exonic. We take the local coverage depth into account. For the purpose of exonpart hint generation and visualization we first summarize the alignments to a coverage depth function in wiggle format. Wiggle format (.wig) is a format of the UCSC Genome Browser.
nohup /home/ubuntu/vol1/busco/augustus-3.3.2/auxprogs/aln2wig/aln2wig -f ali.fs.psl > cov.wig &

#Now generate the exonpart hints with
cat cov.wig | scripts/wig2hints.pl --width=10 --margin=10 --minthresh=2 --minscore=4 --prune=0.1 --src=W --type=ep --UCSC=unstranded.track --radius=4.5 --pri=4 --strand="." > hints.ep.gff

#Concatenate all hints:
cat hints.introns.gff hints.ep.gff > hints.gff &

#Split fasta into 16 files for parallel annotation 
nohup ./fasta-splitter.pl --n-parts 32 --part-size 1932 --measure count /home/ubuntu/vol1/fasta_files/fasta_pseudohap_masked.fa --nopad --line-length 100 --out-dir out_32parts &

#Run AUGUSTUS with the hints (part 1 as example)
scripts/bin/augustus --species=human --UTR=on --extrinsicCfgFile=config/extrinsic/extrinsic.M.RM.E.W.P.cfg --alternatives-from-evidence=true --hintsfile=hints.gff --allow_hinted_splicesites=atac ./fasta_pseudohap_masked.part-1.fa > human_annotation_hints_part1.gff &

